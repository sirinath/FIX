{"issuer":{"name":"FIX Protocol"},"doc":{"name":"FIX Session Protocol (FIXT) 1.1"},"spec":{"date":1204329600,"version":"Version 1.1 errata"},"layout":"FIX","file":{"intro":"FIX Session Protocol was written to be independent of any specific communications protocol (X.25, asynch, TCP\/IP, etc.) or physical medium (copper, fiber, satellite, etc.) chosen for electronic data delivery.  It offers a reliable stream where a message is delivered once and in order.  Up until October 2006, the FIX Session Protocol was coupled with the FIX Application Protocol to provide a reliable transport mechanism for the FIX application messages that did not really exist at the inception of FIX in 1994.The session level is concerned with the delivery of data while the application level defines business related data content.  This document focuses on the delivery of data using the \"FIX Session Protocol\".  For details on the FIX Application Protocol please refer to the appropriate version of the FIX Protocol Specification documentation set found on the FIX website (http:\/\/www.fixprotocol.org\/specifications\/)In October 2006, FPL's Global Technical Committee introduced a new framework which separated the FIX Session Protocol from the FIX Application Protocol.  This allowed the application protocol messages to use any suitable session transport technology, where the FIX Session Protocol became one of the available options as a session transport for FIX application messages.  With this new framework, the GTC has introduced a new moniker associated with the FIX Session Protocol.  Going forward the moniker to identifier the session protocol and the version is FIXT.x.y, with the first version being FIXT 1.1.","header":"FIX Session Protocol (FIXT) Version 1.1","nav":[{"name":"Standard Components","menu":[{"name":"Heartbeat","id":"T_1055","msgtype":"0"},{"name":"Test Request","id":"T_1056","msgtype":"1"},{"name":"Resend Request","id":"T_1057","msgtype":"2"},{"name":"Reject","id":"T_1058","msgtype":"3"},{"name":"Sequence Reset","id":"T_1059","msgtype":"4"},{"name":"Logout","id":"T_1060","msgtype":"5"},{"name":"Logon","id":"T_1061","msgtype":"A"},{"name":"Standard Header","id":"T_1062"},{"name":"Standard Trailer","id":"T_1063"}]}],"func_nav":[],"types":[{"name":"Boolean","desc":"char field containing one of two values:Y = True\/YesN = False\/No"},{"name":"char","desc":"Single character value, can include any alphanumeric character or punctuation except the delimiter. All char fields are case sensitive (i.e. m != M).The following fields are based on char."},{"name":"data","desc":"string field containing raw data with no format or content restrictions. Data fields are always immediately preceded by a length field. The length field should specify the number of bytes of the value of the data field (up to but not including the terminating SOH).Caution=> the value of one of these fields may contain the delimiter (SOH) character. Note that the value specified for this field should be followed by the delimiter (SOH) character as all fields are terminated with an 'SOH'."},{"name":"int","desc":"Sequence of digits without commas or decimals and optional sign character (ASCII characters '-' and '0' - '9' ). The sign character utilizes one byte (i.e. positive int is '99999' while negative int is '-99999'). Note that int values may contain leading zeros (e.g. '00023' = '23').Examples =>723 in field 21 would be mapped int as |21=723|.-723 in field 12 would be mapped int as |12=-723|"},{"name":"Length","desc":"int field representing the length in bytes. Value must be positive."},{"name":"NumInGroup","desc":"int field representing the number of entries in a repeating group. Value must be positive."},{"name":"SeqNum","desc":"int field representing a message sequence number. Value must be positive."},{"name":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt)."},{"name":"UTCTimestamp","desc":"string field representing Time\/date combination represented in UTC (Universal Time Coordinated, also known as 'GMT') in either YYYYMMDD-HH=>MM=>SS (whole seconds) or YYYYMMDD-HH=>MM=>SS.sss (milliseconds) format, colons, dash, and period required.Valid values:YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second) (without milliseconds).YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).Leap Seconds=> Note that UTC includes corrections for leap seconds, which are inserted to account for slowing of the rotation of the earth. Leap second insertion is declared by the International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of Dec. 31 or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second insertion, but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may read '19981231-23:59:59', '19981231-23:59:60', '19990101-00:00:00'"}],"blocks":[{"name":"Standard Header","intro":"The standard FIX message header","fields":[{"position":1,"name":"BeginString","reqd":true,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"8","values":[{"value":"FIXT.1.1","desc":"FIXT 1.1"}]},{"position":2,"name":"BodyLength","reqd":true,"type":"Length","desc":"int field representing the length in bytes. Value must be positive.","id":"9"},{"position":3,"name":"MsgType","reqd":true,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"35"},{"position":3,"name":"ApplVerID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"1128","values":[{"value":0,"desc":"FIX27"},{"value":1,"desc":"FIX30"},{"value":2,"desc":"FIX40"},{"value":3,"desc":"FIX41"},{"value":4,"desc":"FIX42"},{"value":5,"desc":"FIX43"},{"value":6,"desc":"FIX44"},{"value":7,"desc":"FIX50"},{"value":8,"desc":"FIX50SP1"},{"value":9,"desc":"FIX50SP2"}]},{"position":3,"name":"ApplExtID","reqd":false,"type":"int","desc":"Sequence of digits without commas or decimals and optional sign character (ASCII characters '-' and '0' - '9' ). The sign character utilizes one byte (i.e. positive int is '99999' while negative int is '-99999'). Note that int values may contain leading zeros (e.g. '00023' = '23').Examples =>723 in field 21 would be mapped int as |21=723|.-723 in field 12 would be mapped int as |12=-723|","id":"1156"},{"position":3,"name":"CstmApplVerID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"1129"},{"position":4,"name":"SenderCompID","reqd":true,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"49"},{"position":5,"name":"TargetCompID","reqd":true,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"56"},{"position":6,"name":"OnBehalfOfCompID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"115"},{"position":7,"name":"DeliverToCompID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"128"},{"position":8,"name":"SecureDataLen","reqd":false,"type":"Length","desc":"int field representing the length in bytes. Value must be positive.","id":"90"},{"position":9,"name":"SecureData","reqd":false,"type":"data","desc":"string field containing raw data with no format or content restrictions. Data fields are always immediately preceded by a length field. The length field should specify the number of bytes of the value of the data field (up to but not including the terminating SOH).Caution=> the value of one of these fields may contain the delimiter (SOH) character. Note that the value specified for this field should be followed by the delimiter (SOH) character as all fields are terminated with an 'SOH'.","id":"91"},{"position":10,"name":"MsgSeqNum","reqd":true,"type":"SeqNum","desc":"int field representing a message sequence number. Value must be positive.","id":"34"},{"position":11,"name":"SenderSubID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"50"},{"position":12,"name":"SenderLocationID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"142"},{"position":13,"name":"TargetSubID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"57"},{"position":14,"name":"TargetLocationID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"143"},{"position":15,"name":"OnBehalfOfSubID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"116"},{"position":16,"name":"OnBehalfOfLocationID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"144"},{"position":17,"name":"DeliverToSubID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"129"},{"position":18,"name":"DeliverToLocationID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"145"},{"position":19,"name":"PossDupFlag","reqd":false,"type":"Boolean","desc":"char field containing one of two values:Y = True\/YesN = False\/No","id":"43","values":[{"value":"N","desc":"Original transmission"},{"value":"Y","desc":"Possible duplicate"}]},{"position":20,"name":"PossResend","reqd":false,"type":"Boolean","desc":"char field containing one of two values:Y = True\/YesN = False\/No","id":"97","values":[{"value":"N","desc":"Original Transmission"},{"value":"Y","desc":"Possible Resend"}]},{"position":21,"name":"SendingTime","reqd":true,"type":"UTCTimestamp","desc":"string field representing Time\/date combination represented in UTC (Universal Time Coordinated, also known as 'GMT') in either YYYYMMDD-HH=>MM=>SS (whole seconds) or YYYYMMDD-HH=>MM=>SS.sss (milliseconds) format, colons, dash, and period required.Valid values:YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second) (without milliseconds).YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).Leap Seconds=> Note that UTC includes corrections for leap seconds, which are inserted to account for slowing of the rotation of the earth. Leap second insertion is declared by the International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of Dec. 31 or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second insertion, but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may read '19981231-23:59:59', '19981231-23:59:60', '19990101-00:00:00'","id":"52"},{"position":22,"name":"OrigSendingTime","reqd":false,"type":"UTCTimestamp","desc":"string field representing Time\/date combination represented in UTC (Universal Time Coordinated, also known as 'GMT') in either YYYYMMDD-HH=>MM=>SS (whole seconds) or YYYYMMDD-HH=>MM=>SS.sss (milliseconds) format, colons, dash, and period required.Valid values:YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second) (without milliseconds).YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).Leap Seconds=> Note that UTC includes corrections for leap seconds, which are inserted to account for slowing of the rotation of the earth. Leap second insertion is declared by the International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of Dec. 31 or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second insertion, but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may read '19981231-23:59:59', '19981231-23:59:60', '19990101-00:00:00'","id":"122"},{"position":23,"name":"XmlDataLen","reqd":false,"type":"Length","desc":"int field representing the length in bytes. Value must be positive.","id":"212"},{"position":24,"name":"XmlData","reqd":false,"type":"data","desc":"string field containing raw data with no format or content restrictions. Data fields are always immediately preceded by a length field. The length field should specify the number of bytes of the value of the data field (up to but not including the terminating SOH).Caution=> the value of one of these fields may contain the delimiter (SOH) character. Note that the value specified for this field should be followed by the delimiter (SOH) character as all fields are terminated with an 'SOH'.","id":"213"},{"position":25,"name":"MessageEncoding","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"347"},{"position":26,"name":"LastMsgSeqNumProcessed","reqd":false,"type":"SeqNum","desc":"int field representing a message sequence number. Value must be positive.","id":"369"},{"position":27,"name":"NoHops","reqd":false,"type":"NumInGroup","desc":"int field representing the number of entries in a repeating group. Value must be positive.","id":"627"},{"position":28,"name":"HopCompID","reqd":false,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"628","indent":"1"},{"position":29,"name":"HopSendingTime","reqd":false,"type":"UTCTimestamp","desc":"string field representing Time\/date combination represented in UTC (Universal Time Coordinated, also known as 'GMT') in either YYYYMMDD-HH=>MM=>SS (whole seconds) or YYYYMMDD-HH=>MM=>SS.sss (milliseconds) format, colons, dash, and period required.Valid values:YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second) (without milliseconds).YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).Leap Seconds=> Note that UTC includes corrections for leap seconds, which are inserted to account for slowing of the rotation of the earth. Leap second insertion is declared by the International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of Dec. 31 or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second insertion, but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may read '19981231-23:59:59', '19981231-23:59:60', '19990101-00:00:00'","id":"629","indent":"1"},{"position":30,"name":"HopRefID","reqd":false,"type":"SeqNum","desc":"int field representing a message sequence number. Value must be positive.","id":"630","indent":"1"}],"known_ids":["8","9","35","1128","1156","1129","49","56","115","128","90","91","34","50","142","57","143","116","144","129","145","43","97","52","122","212","213","347","369","627","628","629","630"],"reqd_ids":["8","9","35","49","56","34","52"]},{"name":"Standard Trailer","intro":"The standard FIX message trailer","fields":[{"position":1,"name":"SignatureLength","reqd":false,"type":"Length","desc":"int field representing the length in bytes. Value must be positive.","id":"93"},{"position":2,"name":"Signature","reqd":false,"type":"data","desc":"string field containing raw data with no format or content restrictions. Data fields are always immediately preceded by a length field. The length field should specify the number of bytes of the value of the data field (up to but not including the terminating SOH).Caution=> the value of one of these fields may contain the delimiter (SOH) character. Note that the value specified for this field should be followed by the delimiter (SOH) character as all fields are terminated with an 'SOH'.","id":"89"},{"position":3,"name":"CheckSum","reqd":true,"type":"String","desc":"Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).","id":"10"}],"known_ids":["93","89","10"],"reqd_ids":["10"]}],"messages":[{"name":"Heartbeat","id":"T_1055","msgtype":"0","intro":"The Heartbeat monitors the status of the communication link and identifies when the last of a string of messages was not received.","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"TestReqID","reqd":false,"desc":"Required when the heartbeat is the result of a Test Request message. Identifier included in Test Request message to be returned in resulting Heartbeat","id":"112","type":"String"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["112"],"reqd_ids":[]},{"name":"Test Request","id":"T_1056","msgtype":"1","intro":"The test request message forces a heartbeat from the opposing application. The test request message checks sequence numbers or verifies communication line status. The opposite application responds to the Test Request with a Heartbeat containing the TestReqID.","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"TestReqID","reqd":true,"desc":"Identifier included in Test Request message to be returned in resulting Heartbeat","id":"112","type":"String"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["112"],"reqd_ids":["112"]},{"name":"Resend Request","id":"T_1057","msgtype":"2","intro":"The resend request is sent by the receiving application to initiate the retransmission of messages. This function is utilized if a sequence number gap is detected, if the receiving application lost a message, or as a function of the initialization process.","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"BeginSeqNo","reqd":true,"desc":"Message sequence number of first message in range to be resent","id":"7","type":"SeqNum"},{"position":2,"name":"EndSeqNo","reqd":true,"desc":"Message sequence number of last message in range to be resent. If request is for a single message BeginSeqNo (7) = EndSeqNo. If request is for all messages subsequent to a particular message, EndSeqNo = \"0\" (representing infinity).","id":"16","type":"SeqNum"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["7","16"],"reqd_ids":["7","16"]},{"name":"Reject","id":"T_1058","msgtype":"3","intro":"The reject message should be issued when a message is received but cannot be properly processed due to a session-level rule violation. An example of when a reject may be appropriate would be the receipt of a message with invalid basic data which successfully passes de-encryption, CheckSum and BodyLength checks.","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"RefSeqNum","reqd":true,"desc":"MsgSeqNum of rejected message Reference message sequence number","id":"45","type":"SeqNum"},{"position":2,"name":"RefTagID","reqd":false,"desc":"The tag number of the FIX field being referenced. The tag number of the FIX field being referenced.","id":"371","type":"int"},{"position":3,"name":"RefMsgType","reqd":false,"desc":"The MsgType of the FIX message being referenced. The MsgType (35) of the FIX message being referenced.","id":"372","type":"String"},{"position":4,"name":"RefApplVerID","reqd":false,"desc":"Recommended when rejecting an application message that does not explicitly provide ApplVerID ( 1128) on the message being rejected. In this case the value from the DefaultApplVerID(1137) or the default value specified in the NoMsgTypes repeating group on the logon message should be provided. Specifies the service pack release being applied to a message at the session level. Enumerated field with values assigned at time of service pack release. Uses same values as ApplVerID","id":"1130","type":"String"},{"position":5,"name":"RefApplExtID","reqd":false,"desc":"Recommended when rejecting an application message that does not explicitly provide ApplExtID(1156) on the rejected message. In this case the value from the DefaultApplExtID(1407) or the default value specified in the NoMsgTypes repeating group on the logon message should be provided. The extension pack number associated with an application message.","id":"1406","type":"int"},{"position":6,"name":"RefCstmApplVerID","reqd":false,"desc":"Recommended when rejecting an application message that does not explicitly provide CstmApplVerID(1129) on the message being rejected. In this case the value from the DefaultCstmApplVerID(1408) or the default value specified in the NoMsgTypes repeating group on the logon message should be provided. Specifies a custom extension to a message being applied at the session level.","id":"1131","type":"String"},{"position":7,"name":"SessionRejectReason","reqd":false,"desc":"Code to identify reason for a session-level Reject message. Code to identify reason for a session-level Reject message.","id":"373","type":"int","values":[{"value":"0","desc":"Invalid Tag Number"},{"value":"1","desc":"Required Tag Missing"},{"value":"2","desc":"Tag not defined for this message type"},{"value":"3","desc":"Undefined tag"},{"value":"4","desc":"Tag specified without a value"},{"value":"5","desc":"Value is incorrect (out of range) for this tag"},{"value":"6","desc":"Incorrect data format for value"},{"value":"7","desc":"Decryption problem"},{"value":"8","desc":"Signature problem"},{"value":"9","desc":"CompID problem"},{"value":"10","desc":"SendingTime Accuracy Problem"},{"value":"11","desc":"Invalid MsgType"},{"value":"12","desc":"XML Validation Error"},{"value":"13","desc":"Tag appears more than once"},{"value":"14","desc":"Tag specified out of required order"},{"value":"15","desc":"Repeating group fields out of order"},{"value":"16","desc":"Incorrect NumInGroup count for repeating group"},{"value":"17","desc":"Non \"Data\" value includes field delimiter ( character)"},{"value":"18","desc":"Invalid\/Unsupported Application Version"},{"value":"99","desc":"Other"}]},{"position":8,"name":"Text","reqd":false,"desc":"Where possible, message to explain reason for rejection Free format text string. Note: this field does not have a specified maximum length","id":"58","type":"String"},{"position":9,"name":"EncodedTextLen","reqd":false,"desc":"Must be set if EncodedText field is specified and must immediately precede it. Byte length of encoded (non-ASCII characters) EncodedText (355) field.","id":"354","type":"Length"},{"position":10,"name":"EncodedText","reqd":false,"desc":"Encoded (non-ASCII characters) representation of the Text field in the encoded format specified via the MessageEncoding field. Encoded (non-ASCII characters) representation of the Text (58) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the Text field.","id":"355","type":"data"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["45","371","372","1130","1406","1131","373","58","354","355"],"reqd_ids":["45"]},{"name":"Sequence Reset","id":"T_1059","msgtype":"4","intro":"The sequence reset message is used by the sending application to reset the incoming sequence number on the opposing side.","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"GapFillFlag","reqd":false,"desc":"Indicates that the Sequence Reset message is replacing administrative or application messages which will not be resent.","id":"123","type":"Boolean","values":[{"value":"N","desc":"Sequence Reset, Ignore Msg Seq Num (N\/A For FIXML - Not Used)"},{"value":"Y","desc":"Gap Fill Message, Msg Seq Num Field Valid"}]},{"position":2,"name":"NewSeqNo","reqd":true,"desc":"New sequence number","id":"36","type":"SeqNum"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["123","36"],"reqd_ids":["36"]},{"name":"Logout","id":"T_1060","msgtype":"5","intro":"The logout message initiates or confirms the termination of a FIX session. Disconnection without the exchange of logout messages should be interpreted as an abnormal condition.","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"SessionStatus","reqd":false,"desc":"Session status at time of logout. Status of a FIX session","id":"1409","type":"int","values":[{"value":"0","desc":"Session active"},{"value":"1","desc":"Session password changed"},{"value":"2","desc":"Session password due to expire"},{"value":"3","desc":"New session password does not comply with policy"},{"value":"4","desc":"Session logout complete"},{"value":"5","desc":"Invalid username or password"},{"value":"6","desc":"Account locked"},{"value":"7","desc":"Logons are not allowed at this time"},{"value":"8","desc":"Password expired"}]},{"position":2,"name":"Text","reqd":false,"desc":"Free format text string. Note: this field does not have a specified maximum length","id":"58","type":"String"},{"position":3,"name":"EncodedTextLen","reqd":false,"desc":"Must be set if EncodedText field is specified and must immediately precede it. Byte length of encoded (non-ASCII characters) EncodedText (355) field.","id":"354","type":"Length"},{"position":4,"name":"EncodedText","reqd":false,"desc":"Encoded (non-ASCII characters) representation of the Text field in the encoded format specified via the MessageEncoding field. Encoded (non-ASCII characters) representation of the Text (58) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the Text field.","id":"355","type":"data"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["1409","58","354","355"],"reqd_ids":[]},{"name":"Logon","id":"T_1061","msgtype":"A","intro":"The logon message authenticates a user establishing a connection to a remote system. The logon message must be the first message sent by the application requesting to initiate a FIX session.","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"EncryptMethod","reqd":true,"desc":"(Always unencrypted) Method of encryption.","id":"98","type":"int","values":[{"value":"0","desc":"None \/ Other"},{"value":"1","desc":"PKCS (Proprietary)"},{"value":"2","desc":"DES (ECB Mode)"},{"value":"3","desc":"PKCS \/ DES (Proprietary)"},{"value":"4","desc":"PGP \/ DES (Defunct)"},{"value":"5","desc":"PGP \/ DES-MD5 (See app note on FIX web site)"},{"value":"6","desc":"PEM \/ DES-MD5 (see app note on FIX web site)"}]},{"position":2,"name":"HeartBtInt","reqd":true,"desc":"Note same value used by both sides Heartbeat interval (seconds)","id":"108","type":"int"},{"position":3,"name":"RawDataLength","reqd":false,"desc":"Required for some authentication methods Number of bytes in raw data field.","id":"95","type":"Length"},{"position":4,"name":"RawData","reqd":false,"desc":"Required for some authentication methods Unformatted raw data, can include bitmaps, word processor documents, etc.","id":"96","type":"data"},{"position":5,"name":"ResetSeqNumFlag","reqd":false,"desc":"Indicates both sides of a FIX session should reset sequence numbers Indicates that the both sides of the FIX session should reset sequence numbers.","id":"141","type":"Boolean","values":[{"value":"N","desc":"No"},{"value":"Y","desc":"Yes, reset sequence numbers"}]},{"position":6,"name":"NextExpectedMsgSeqNum","reqd":false,"desc":"Optional, alternative via counterparty bi-lateral agreement message gap detection and recovery approach (see \"Logon Message NextExpectedMsgSeqNum Processing\" section) Next expected MsgSeqNum value to be received.","id":"789","type":"SeqNum"},{"position":7,"name":"MaxMessageSize","reqd":false,"desc":"Can be used to specify the maximum number of bytes supported for messages received Maximum number of bytes supported for a single message.","id":"383","type":"Length"},{"position":8,"name":"NoMsgTypes","reqd":false,"desc":"Specifies the number of repeating RefMsgTypes specified Number of MsgTypes (35) in repeating group.","id":"384","type":"NumInGroup"},{"position":9,"name":"RefMsgType","reqd":false,"desc":"Specifies a specific, supported MsgType. Required if NoMsgTypes is > 0. Should be specified from the point of view of the sender of the Logon message The MsgType (35) of the FIX message being referenced.","id":"372","type":"String","indent":"1"},{"position":10,"name":"MsgDirection","reqd":false,"desc":"Indicates direction (send vs. receive) of a supported MsgType. Required if NoMsgTypes is &gt; 0. Should be specified from the point of view of the sender of the Logon message Specifies the direction of the message.","id":"385","type":"char","indent":"1","values":[{"value":"R","desc":"Receive"},{"value":"S","desc":"Send"}]},{"position":11,"name":"RefApplVerID","reqd":false,"desc":"Specifies the service pack release being applied to an application message. Specifies the service pack release being applied to a message at the session level. Enumerated field with values assigned at time of service pack release. Uses same values as ApplVerID","id":"1130","type":"String","indent":"1"},{"position":12,"name":"RefApplExtID","reqd":false,"desc":"Specified the extension pack being applied to a message. The extension pack number associated with an application message.","id":"1406","type":"int","indent":"1"},{"position":13,"name":"RefCstmApplVerID","reqd":false,"desc":"Specifies a custom extension to a message being applied at the session level. Specifies a custom extension to a message being applied at the session level.","id":"1131","type":"String","indent":"1"},{"position":14,"name":"DefaultVerIndicator","reqd":false,"desc":"Indicates that this Application Version (RefApplVerID(1130), RefApplExtID(1406),RefCstmApplVerID(1131)) is the default for the RefMsgType(372) field.","id":"1410","type":"Boolean","indent":"1"},{"position":16,"name":"TestMessageIndicator","reqd":false,"desc":"Can be used to specify that this FIX session will be sending and receiving \"test\" vs. \"production\" messages. Indicates whether or not this FIX Session is a \"test\" vs. \"production\" connection. Useful for preventing \"accidents\".","id":"464","type":"Boolean","values":[{"value":"N","desc":"False (Production)"},{"value":"Y","desc":"True (Test)"}]},{"position":17,"name":"Username","reqd":false,"desc":"Userid or username.","id":"553","type":"String"},{"position":18,"name":"Password","reqd":false,"desc":"Note: minimal security exists without transport-level encryption. Password or passphrase.","id":"554","type":"String"},{"position":19,"name":"NewPassword","reqd":false,"desc":"Specifies a new password for the FIX Logon. The new password is used for subsequent logons. New Password or passphrase","id":"925","type":"String"},{"position":20,"name":"EncryptedPasswordMethod","reqd":false,"desc":"Enumeration defining the encryption method used to encrypt password fields. No encryption methods defined.","id":"1400","type":"int"},{"position":21,"name":"EncryptedPasswordLen","reqd":false,"desc":"Length of the EncryptedPassword(1402) field","id":"1401","type":"Length"},{"position":22,"name":"EncryptedPassword","reqd":false,"desc":"Encrypted password - encrypted via the method specified in the field EncryptedPasswordMethod(1400)","id":"1402","type":"data"},{"position":23,"name":"EncryptedNewPasswordLen","reqd":false,"desc":"Length of the EncryptedNewPassword(1404) field","id":"1403","type":"Length"},{"position":24,"name":"EncryptedNewPassword","reqd":false,"desc":"Encrypted new password- encrypted via the method specified in the field EncryptedPasswordMethod(1400) Encrypted new password - encrypted via the method specified in the field EncryptedPasswordMethod(1400)","id":"1404","type":"data"},{"position":25,"name":"SessionStatus","reqd":false,"desc":"Session status at time of logon. Field is intended to be used when the logon is sent as an acknowledgement from acceptor of the FIX session. Status of a FIX session","id":"1409","type":"int","values":[{"value":"0","desc":"Session active"},{"value":"1","desc":"Session password changed"},{"value":"2","desc":"Session password due to expire"},{"value":"3","desc":"New session password does not comply with policy"},{"value":"4","desc":"Session logout complete"},{"value":"5","desc":"Invalid username or password"},{"value":"6","desc":"Account locked"},{"value":"7","desc":"Logons are not allowed at this time"},{"value":"8","desc":"Password expired"}]},{"position":26,"name":"DefaultApplVerID","reqd":true,"desc":"The default version of FIX messages used in this session. Specifies the service pack release being applied, by default, to message at the session level. Enumerated field with values assigned at time of service pack release. Uses same values as ApplVerID","id":"1137","type":"String"},{"position":27,"name":"DefaultApplExtID","reqd":false,"desc":"The default extension pack for FIX messages used in this session The extension pack number that is the default for a FIX session.","id":"1407","type":"int"},{"position":28,"name":"DefaultCstmApplVerID","reqd":false,"desc":"The default custom application version (dictionary) for FIX messages used in this session The default custom application version ID that is the default for a session.","id":"1408","type":"String"},{"position":29,"name":"Text","reqd":false,"desc":"Available to provide a response to logon when used as a logon acknowledgement from acceptor back to the logon initiator. Free format text string. Note: this field does not have a specified maximum length","id":"58","type":"String"},{"position":30,"name":"EncodedTextLen","reqd":false,"desc":"Must be set if EncodedText field is specified and must immediately precede it. Byte length of encoded (non-ASCII characters) EncodedText (355) field.","id":"354","type":"Length"},{"position":31,"name":"EncodedText","reqd":false,"desc":"Encoded (non-ASCII characters) representation of the Text field in the encoded format specified via the MessageEncoding field. Encoded (non-ASCII characters) representation of the Text (58) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the Text field.","id":"355","type":"data"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["98","108","95","96","141","789","383","384","372","385","1130","1406","1131","1410","464","553","554","925","1400","1401","1402","1403","1404","1409","1137","1407","1408","58","354","355"],"reqd_ids":["98","108","1137"]},{"name":"Standard Header","id":"T_1062","msgtype":"-1","intro":"The standard FIX message header","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"BeginString","reqd":true,"desc":"Always unencrypted, must be first field in message. Identifies beginning of new message and protocol version.","id":"8","type":"String","values":[{"value":"FIXT.1.1","desc":"FIXT 1.1"}]},{"position":2,"name":"BodyLength","reqd":true,"desc":"(Always unencrypted, must be second field in message) Message length, in bytes, forward to the CheckSum field. ALWAYS SECOND FIELD IN MESSAGE. (Always unencrypted)","id":"9","type":"Length"},{"position":3,"name":"MsgType","reqd":true,"desc":"(Always unencrypted, must be third field in message) Defines message type. ALWAYS THIRD FIELD IN MESSAGE. (Always unencrypted). Note: A \"U\" as the first character in the MsgType field (i.e. U1, U2, etc) indicates that the message format is privately defined between the sender and receiver.","id":"35","type":"String"},{"position":3,"name":"ApplVerID","reqd":false,"desc":"Indicates application version using a service pack identifier. The ApplVerID applies to a specific message occurrence. Specifies the service pack release being applied at message level. Enumerated field with values assigned at time of service pack release","id":"1128","type":"String","values":[{"value":"0","desc":"FIX27"},{"value":"1","desc":"FIX30"},{"value":"2","desc":"FIX40"},{"value":"3","desc":"FIX41"},{"value":"4","desc":"FIX42"},{"value":"5","desc":"FIX43"},{"value":"6","desc":"FIX44"},{"value":"7","desc":"FIX50"},{"value":"8","desc":"FIX50SP1"},{"value":"9","desc":"FIX50SP2"}]},{"position":3,"name":"ApplExtID","reqd":false,"desc":"The extension pack number associated with an application message.","id":"1156","type":"int"},{"position":3,"name":"CstmApplVerID","reqd":false,"desc":"Used to support bilaterally agreed custom functionality Specifies a custom extension to a message being applied at the message level. Enumerated field","id":"1129","type":"String"},{"position":4,"name":"SenderCompID","reqd":true,"desc":"(Always unencrypted) Assigned value used to identify firm sending message.","id":"49","type":"String"},{"position":5,"name":"TargetCompID","reqd":true,"desc":"(Always unencrypted) Assigned value used to identify receiving firm.","id":"56","type":"String"},{"position":6,"name":"OnBehalfOfCompID","reqd":false,"desc":"Trading partner company ID used when sending messages via a third party (Can be embedded within encrypted data section.) Assigned value used to identify firm originating message if the message was delivered by a third party i.e. the third party firm identifier would be delivered in the SenderCompID field and the firm originating the message in this field.","id":"115","type":"String"},{"position":7,"name":"DeliverToCompID","reqd":false,"desc":"Trading partner company ID used when sending messages via a third party (Can be embedded within encrypted data section.) Assigned value used to identify the firm targeted to receive the message if the message is delivered by a third party i.e. the third party firm identifier would be delivered in the TargetCompID (56) field and the ultimate receiver firm ID in this field.","id":"128","type":"String"},{"position":8,"name":"SecureDataLen","reqd":false,"desc":"Required to identify length of encrypted section of message. (Always unencrypted) Length of encrypted message","id":"90","type":"Length"},{"position":9,"name":"SecureData","reqd":false,"desc":"Required when message body is encrypted. Always immediately follows SecureDataLen field. Actual encrypted data stream","id":"91","type":"data"},{"position":10,"name":"MsgSeqNum","reqd":true,"desc":"(Can be embedded within encrypted data section.) Integer message sequence number.","id":"34","type":"SeqNum"},{"position":11,"name":"SenderSubID","reqd":false,"desc":"(Can be embedded within encrypted data section.) Assigned value used to identify specific message originator (desk, trader, etc.)","id":"50","type":"String"},{"position":12,"name":"SenderLocationID","reqd":false,"desc":"Sender's LocationID (i.e. geographic location and\/or desk) (Can be embedded within encrypted data section.) Assigned value used to identify specific message originator's location (i.e. geographic location and\/or desk, trader)","id":"142","type":"String"},{"position":13,"name":"TargetSubID","reqd":false,"desc":"\"ADMIN\" reserved for administrative messages not intended for a specific user. (Can be embedded within encrypted data section.) Assigned value used to identify specific individual or unit intended to receive message. \"ADMIN\" reserved for administrative messages not intended for a specific user.","id":"57","type":"String"},{"position":14,"name":"TargetLocationID","reqd":false,"desc":"Trading partner LocationID (i.e. geographic location and\/or desk) (Can be embedded within encrypted data section.) Assigned value used to identify specific message destination's location (i.e. geographic location and\/or desk, trader)","id":"143","type":"String"},{"position":15,"name":"OnBehalfOfSubID","reqd":false,"desc":"Trading partner SubID used when delivering messages via a third party. (Can be embedded within encrypted data section.) Assigned value used to identify specific message originator (i.e. trader) if the message was delivered by a third party","id":"116","type":"String"},{"position":16,"name":"OnBehalfOfLocationID","reqd":false,"desc":"Trading partner LocationID (i.e. geographic location and\/or desk) used when delivering messages via a third party. (Can be embedded within encrypted data section.) Assigned value used to identify specific message originator's location (i.e. geographic location and\/or desk, trader) if the message was delivered by a third party","id":"144","type":"String"},{"position":17,"name":"DeliverToSubID","reqd":false,"desc":"Trading partner SubID used when delivering messages via a third party. (Can be embedded within encrypted data section.) Assigned value used to identify specific message recipient (i.e. trader) if the message is delivered by a third party","id":"129","type":"String"},{"position":18,"name":"DeliverToLocationID","reqd":false,"desc":"Trading partner LocationID (i.e. geographic location and\/or desk) used when delivering messages via a third party. (Can be embedded within encrypted data section.) Assigned value used to identify specific message recipient's location (i.e. geographic location and\/or desk, trader) if the message was delivered by a third party","id":"145","type":"String"},{"position":19,"name":"PossDupFlag","reqd":false,"desc":"Always required for retransmitted messages, whether prompted by the sending system or as the result of a resend request. (Can be embedded within encrypted data section.) Indicates possible retransmission of message with this sequence number","id":"43","type":"Boolean","values":[{"value":"N","desc":"Original transmission"},{"value":"Y","desc":"Possible duplicate"}]},{"position":20,"name":"PossResend","reqd":false,"desc":"Required when message may be duplicate of another message sent under a different sequence number. (Can be embedded within encrypted data section.) Indicates that message may contain information that has been sent under another sequence number.","id":"97","type":"Boolean","values":[{"value":"N","desc":"Original Transmission"},{"value":"Y","desc":"Possible Resend"}]},{"position":21,"name":"SendingTime","reqd":true,"desc":"(Can be embedded within encrypted data section.) Time of message transmission (always expressed in UTC (Universal Time Coordinated, also known as \"GMT\")","id":"52","type":"UTCTimestamp"},{"position":22,"name":"OrigSendingTime","reqd":false,"desc":"Required for message resent as a result of a ResendRequest. If data is not available set to same value as SendingTime (Can be embedded within encrypted data section.) Original time of message transmission (always expressed in UTC (Universal Time Coordinated, also known as \"GMT\") when transmitting orders as the result of a resend request.","id":"122","type":"UTCTimestamp"},{"position":23,"name":"XmlDataLen","reqd":false,"desc":"Required when specifying XmlData to identify the length of a XmlData message block. (Can be embedded within encrypted data section.) Length of the XmlData data block.","id":"212","type":"Length"},{"position":24,"name":"XmlData","reqd":false,"desc":"Can contain a XML formatted message block (e.g. FIXML). Always immediately follows XmlDataLen field. (Can be embedded within encrypted data section.)\nSee Volume 1: FIXML Support Actual XML data stream (e.g. FIXML). See approriate XML reference (e.g. FIXML). Note: may contain embedded SOH characters.","id":"213","type":"data"},{"position":25,"name":"MessageEncoding","reqd":false,"desc":"Type of message encoding (non-ASCII characters) used in a message's \"Encoded\" fields. Required if any \"Encoding\" fields are used. Type of message encoding (non-ASCII (non-English) characters) used in a message's \"Encoded\" fields.","id":"347","type":"String"},{"position":26,"name":"LastMsgSeqNumProcessed","reqd":false,"desc":"The last MsgSeqNum value received by the FIX engine and processed by downstream application, such as trading system or order routing system. Can be specified on every message sent. Useful for detecting a backlog with a counterparty. The last MsgSeqNum (34) value received by the FIX engine and processed by downstream application, such as trading engine or order routing system. Can be specified on every message sent. Useful for detecting a backlog with a counterparty.","id":"369","type":"SeqNum"},{"position":27,"name":"NoHops","reqd":false,"desc":"Number of HopCompID entries in repeating group.","id":"627","type":"NumInGroup"},{"position":28,"name":"HopCompID","reqd":false,"desc":"Assigned value used to identify the third party firm which delivered a specific message either from the firm which originated the message or from another third party (if multiple \"hops\" are performed). It is recommended that this value be the SenderCompID (49) of the third party. Applicable when messages are communicated\/re-distributed via third parties which function as service bureaus or \"hubs\". Only applicable if OnBehalfOfCompID (115) is being used.","id":"628","type":"String","indent":"1"},{"position":29,"name":"HopSendingTime","reqd":false,"desc":"Time that HopCompID (628) sent the message. It is recommended that this value be the SendingTime (52) of the message sent by the third party. Applicable when messages are communicated\/re-distributed via third parties which function as service bureaus or \"hubs\". Only applicable if OnBehalfOfCompID (115) is being used.","id":"629","type":"UTCTimestamp","indent":"1"},{"position":30,"name":"HopRefID","reqd":false,"desc":"Reference identifier assigned by HopCompID (628) associated with the message sent. It is recommended that this value be the MsgSeqNum (34) of the message sent by the third party. Applicable when messages are communicated\/re-distributed via third parties which function as service bureaus or \"hubs\". Only applicable if OnBehalfOfCompID (115) is being used.","id":"630","type":"SeqNum","indent":"1"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["8","9","35","1128","1156","1129","49","56","115","128","90","91","34","50","142","57","143","116","144","129","145","43","97","52","122","212","213","347","369","627","628","629","630"],"reqd_ids":["8","9","35","49","56","34","52"]},{"name":"Standard Trailer","id":"T_1063","msgtype":"-2","intro":"The standard FIX message trailer","fields":[{"name":"StandardHeader","reqd":true,"type":"block"},{"position":1,"name":"SignatureLength","reqd":false,"desc":"Required when trailer contains signature. Note: Not to be included within SecureData field Number of bytes in signature field","id":"93","type":"Length"},{"position":2,"name":"Signature","reqd":false,"desc":"Note: Not to be included within SecureData field Electronic signature","id":"89","type":"data"},{"position":3,"name":"CheckSum","reqd":true,"desc":"(Always unencrypted, always last field in message) Three byte, simple checksum (see Volume 2: \"Checksum Calculation\" for description). ALWAYS LAST FIELD IN MESSAGE; i.e. serves, with the trailing , as the end-of-message delimiter. Always defined as three characters. (Always unencrypted)","id":"10","type":"String"},{"name":"StandardTrailer","reqd":true,"type":"block"}],"known_ids":["93","89","10"],"reqd_ids":["10"]}]}}